---
name: Bash Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
    pull_request:
      types:
        - opened
        - reopened
        - synchronize
    tags:
      - 'v?[0-9]+.[0-9]+.[0-9]+'

env:
  CURL: 'curl -fsSL --netrc-optional'
  SHELLCHECK_VERSION: latest

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Log Git Reference Info
        run: |
          cat << EOF
          GITHUB_EVENT_NAME:    ${GITHUB_EVENT_NAME}
          GITHUB_REF:           ${GITHUB_REF}
          GITHUB_REF_TYPE:      ${GITHUB_REF_TYPE}
          GITHUB_REF_NAME:      ${GITHUB_REF_NAME}
          EOF
      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y software-properties-common bash ca-certificates curl jq make xz-utils

          # shellcheck
          if [[ "${SHELLCHECK_VERSION}" == "latest" ]]; then
            SHELLCHECK_VERSION=$(${CURL} "https://api.github.com/repos/koalaman/shellcheck/releases/latest" | jq -r .tag_name);
          fi
          ${CURL} https://github.com/koalaman/shellcheck/releases/download/${SHELLCHECK_VERSION}/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz -o shellcheck.tar.xv
          tar -xvf shellcheck.tar.xv
          mv shellcheck-${SHELLCHECK_VERSION}/shellcheck /usr/local/bin/
          chmod +x /usr/local/bin/shellcheck
          shellcheck --version

          # clean
          if [[ -f /usr/local/bin/terraform ]]; then
            rm -f /usr/local/bin/terraform;
          fi
      - name: Lint
        run: make lint
      - name: Smoke Test
        run: |
          ./tfget latest
          terraform --version

  deploy:
    if: >-
      "${GITHUB_EVENT_NAME}" == "push" &&
      "${GITHUB_REF_TYPE}" == "tag"
      # github.event_name == 'push' &&
      # github.event.ref_type == 'tag'
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Package
        run: tar -czvf tfget-${GITHUB_REF_NAME}.tar.gz tfget
      - name: Deploy
        uses: ncipollo/release-action@v1
        with:
          artifacts: tfget-${GITHUB_REF_NAME}.tar.gz

  slack:
    if: always()
    needs:
      - build
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Slack Notification
        uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          name: ${{ secrets.SLACK_USERNAME }}
          icon_url: "https://cdn-icons-png.flaticon.com/512/25/25231.png"
